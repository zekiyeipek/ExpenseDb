// <auto-generated />
using System;
using ExpenseDb.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpenseDb.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250502210646_SeedInitialUsersIfNotYet")]
    partial class SeedInitialUsersIfNotYet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("ExpenseDb.API.Models.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ulaşım"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yemek"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Konaklama"
                        });
                });

            modelBuilder.Entity("ExpenseDb.API.Models.PaymentSimulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("integer");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PaymentSimulations");
                });

            modelBuilder.Entity("ExpenseDb.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            FullName = "Admin Kullanıcı",
                            Iban = "TR000000000000000000000000",
                            PasswordHash = new byte[] { 20, 106, 173, 148, 190, 235, 145, 52, 33, 123, 214, 161, 61, 225, 67, 79, 63, 21, 9, 113, 1, 227, 137, 9, 18, 176, 228, 238, 193, 90, 120, 116, 44, 95, 58, 170, 125, 48, 16, 132, 51, 158, 104, 188, 235, 232, 243, 136, 32, 59, 74, 128, 84, 75, 178, 209, 143, 18, 183, 157, 210, 124, 179, 59 },
                            PasswordSalt = new byte[] { 142, 65, 159, 15, 184, 106, 111, 233, 203, 109, 124, 232, 127, 227, 152, 76, 222, 235, 192, 140, 192, 22, 244, 103, 228, 120, 78, 165, 113, 162, 1, 29, 21, 115, 238, 186, 237, 166, 44, 64, 205, 131, 203, 84, 29, 51, 105, 208, 229, 172, 104, 185, 152, 118, 74, 21, 255, 37, 230, 98, 239, 169, 32, 213, 145, 71, 149, 91, 54, 228, 101, 140, 160, 51, 30, 182, 98, 20, 45, 111, 187, 13, 73, 116, 11, 117, 26, 27, 146, 77, 254, 49, 131, 99, 190, 124, 23, 169, 208, 81, 166, 83, 90, 25, 31, 132, 253, 212, 116, 207, 94, 164, 116, 141, 196, 207, 179, 104, 185, 79, 108, 185, 45, 206, 18, 158, 201, 28 },
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "personel@example.com",
                            FullName = "Personel Kullanıcı",
                            Iban = "TR111111111111111111111111",
                            PasswordHash = new byte[] { 151, 173, 162, 49, 105, 84, 252, 177, 148, 148, 1, 112, 150, 176, 18, 198, 115, 33, 48, 19, 226, 117, 69, 49, 255, 22, 122, 153, 177, 250, 234, 145, 240, 227, 224, 179, 223, 65, 224, 30, 150, 106, 213, 51, 173, 121, 136, 93, 3, 17, 14, 67, 49, 69, 8, 22, 249, 124, 242, 43, 152, 227, 3, 119 },
                            PasswordSalt = new byte[] { 147, 162, 130, 141, 149, 136, 192, 122, 245, 24, 150, 81, 234, 53, 14, 144, 33, 6, 151, 242, 131, 244, 224, 158, 62, 201, 171, 128, 18, 145, 247, 197, 213, 165, 97, 117, 33, 5, 76, 113, 218, 34, 123, 176, 15, 111, 117, 82, 31, 152, 241, 127, 67, 63, 241, 106, 255, 157, 64, 221, 232, 97, 39, 126, 185, 191, 212, 155, 158, 137, 95, 48, 41, 100, 38, 181, 32, 171, 145, 238, 16, 189, 115, 47, 183, 250, 249, 158, 89, 39, 100, 242, 54, 221, 202, 111, 123, 242, 205, 70, 138, 80, 19, 184, 239, 132, 54, 103, 204, 135, 188, 57, 110, 101, 65, 155, 28, 138, 79, 116, 197, 240, 86, 157, 167, 202, 146, 18 },
                            Role = 2
                        });
                });

            modelBuilder.Entity("Expense", b =>
                {
                    b.HasOne("ExpenseDb.API.Models.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseDb.API.Models.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpenseDb.API.Models.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpenseDb.API.Models.User", b =>
                {
                    b.Navigation("Expenses");
                });
#pragma warning restore 612, 618
        }
    }
}
